name: Deploy Production
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: read
  packages: write
  actions: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          else
            echo "Error: No valid tag found!" >&2
            exit 1
          fi

      - name: Clear Docker Cache
        run: |
          docker system prune -af
          docker builder prune -af

      - name: Build Application Image
        run: |
          docker build --no-cache --pull -f docker/prod/prod.Dockerfile \
            -t ghcr.io/ardiman-xyz/fkip_web_app:${{ env.VERSION }} \
            -t ghcr.io/ardiman-xyz/fkip_web_app:stable .

          docker push ghcr.io/ardiman-xyz/fkip_web_app:${{ env.VERSION }}
          docker push ghcr.io/ardiman-xyz/fkip_web_app:stable

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/html/docker/web-fkip/prod

            # Update environment variables
            if grep -q "APP_VERSION=" .env; then
              sed -i "s/APP_VERSION=.*/APP_VERSION=${{ env.VERSION }}/" .env
            else
              echo "APP_VERSION=${{ env.VERSION }}" >> .env
            fi

            if grep -q "APP_ENV=" .env; then
              sed -i "s/APP_ENV=.*/APP_ENV=production/" .env
            else
              echo "APP_ENV=production" >> .env
            fi

            # Pull latest images
            docker compose pull

            # Clean up old images
            docker image prune -f

            # Stop and remove existing containers properly
            docker compose -p fkip down

            # Make sure the container is really gone before recreating
            if docker ps -a | grep -q "fkip_web_prod"; then
              docker rm -f fkip_web_prod
            fi

            # Start containers with new images
            docker compose -p fkip up -d

            # Wait for the container to be fully started
            echo "Waiting for container to be ready..."

            # More robust approach for checking if container is ready
            for i in {1..30}; do
              if docker compose -p fkip ps | grep -q "app.*running"; then
                echo "Container is running!"
                break
              fi

              if [ $i -eq 30 ]; then
                echo "Container failed to start within timeout"
                exit 1
              fi

              echo "Waiting for container... attempt $i/30"
              sleep 5
            done

            # Verify all is good
            docker compose -p fkip ps
            echo "Deployment completed successfully"
